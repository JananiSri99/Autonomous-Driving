import numpy as np
import cv2
from tqdm import tqdm
import time


def preprocess(x):
  pass
  #return processed_x

def train(path_to_images = 'data/training/images', 
          csv_file = 'data/training/steering_angles.csv'):
    '''
    First method you need to complete. 
    Args: 
    path_to_images = path to jpg image files
    csv_file = path and filename to csv file containing frame numbers and steering angles. 
    Returns: 
    NN = Trained Neural Network object 
    '''

    # You may make changes here if you wish. 
    # Import Steering Angles CSV
    data = np.genfromtxt(csv_file, delimiter = ',')
    frame_nums = data[:,0]
    steering_angles = data[:,1]

    # Resized image dimensions
    rh = 45
    rw = 45
    X = np.empty((len(frame_nums),rh*rw))

    # Import image and pre-processing image 
    for i in range(len(frame_nums)):
      im_full = cv2.imread(path_to_images + '/' + str(int(i)).zfill(4) + '.jpg',cv2.IMREAD_GRAYSCALE)
      image1 = im_full.shape
      w = int(image1[0])
      h = int(image1[1])
      h_modified= int(np.floor(0.38 *h))
      im_full = im_full[h_modified:h,0:w] # Image cropped to keep just the roads
      im_full = cv2.resize(im_full, (rh, rw),interpolation = cv2.INTER_AREA)
      im_full = im_full/255
      X[i] = im_full.flatten()

    # Pre-processing steering angles
    bins = 64
    steering_angle_bins = [-180 + j*(360)/(bins-1) for j in range(bins)]
    y_train = np.zeros([1500,64])

    # Gaussian smoothening
    gs_data = [0.1, 0.32, 0.61, 0.89, 1, 0.89, 0.61, 0.32, 0.1]
    position_a = 4
    position_b = 5
    for i,theta in enumerate((steering_angles)):
      intp = int(np.interp(theta,[-180,180],[0,64]))
      if ((intp + 4 <= 63) & (intp - 4 >= 0)):
        y_train[i][intp-position_a:intp+position_b] = y_train[i][intp-position_a:intp+position_b] + gs_data
    y = y_train

    # Train your network here. You'll probably need some weights and gradients!
    NN = NeuralNetwork()
    
    # Adam optimization technique 

    # Hyperparameters 
    iter = 2500
    alpha = 1e-3
    beta1 = 0.9
    beta2 = 0.999
    eps = 1e-8

    # Initializing first moment vector 
    length_p = len(NN.W1.flatten()) + len(NN.W2.flatten())
    m0 = np.zeros(length_p)
    v0 = np.zeros(length_p)
    mt = np.zeros(length_p)
    vt = np.zeros(length_p)
    t = 0.0
    losses = []

    for i in tqdm(range(iter)):
      t = t+1
      grads = NN.computeGradients(X = X, y = y)
      mt = beta1*mt + (1-beta1)*grads
      vt = beta2*vt + (1-beta2)*grads**2
      mt_hat = mt/(1-beta1**t)
      vt_hat = vt/(1-beta2**t)
      params = NN.getParams()
      new_params = params - ((alpha*mt_hat)/(np.sqrt(vt_hat)+eps))
      NN.setParams(new_params)
      losses.append(NN.costFunction(X = X, y = y))

    
    return NN


def predict(NN, image_file):
    '''
    Second method you need to complete. 
    Given an image filename, load image, make and return predicted steering angle in degrees. 
    '''
    image = cv2.imread(image_file)

    ## Perform inference using your Neural Network (NN) here.
    rh = 45
    rw = 45
    image = cv2.imread(image_file,cv2.IMREAD_GRAYSCALE)
    image1 = image.shape
    w = int(image1[0])
    h = int(image1[1])
    h_modified= int(np.floor(0.38 *h))
    #print(w,h)
    #w = 1048
    #h = 1328
    #h_modified = 500
    image = image[h_modified:h,0:w] # Image cropped to keep just the roads
    image = cv2.resize(image, (rh, rw),interpolation = cv2.INTER_AREA)
    image = image/255
    image = image.ravel()
    yHat = NN.forward(image)
    bin = np.interp(np.argmax(yHat),[0,64],[-180,180])
    return bin
    

class NeuralNetwork(object):
    def __init__(self):        
        '''
        Neural Network Class, you may need to make some modifications here!
        '''
        self.inputLayerSize = 45*45
        self.outputLayerSize = 64
        self.hiddenLayerSize = 30
        
        #Weights (parameters)
        self.W1 = np.random.randn(self.inputLayerSize,self.hiddenLayerSize)
        self.W2 = np.random.randn(self.hiddenLayerSize,self.outputLayerSize)
    
    def forward(self, X):
        #Propogate inputs though network
        self.z2 = np.dot(X, self.W1)
        self.a2 = self.sigmoid(self.z2)
        self.z3 = np.dot(self.a2, self.W2)
        yHat = self.sigmoid(self.z3) 
        return yHat
        
    def sigmoid(self, z):
        #Apply sigmoid activation function to scalar, vector, or matrix
        return 1/(1+np.exp(-z))
    
    def sigmoidPrime(self,z):
        #Gradient of sigmoid
        return np.exp(-z)/((1+np.exp(-z))**2)
    
    def costFunction(self, X, y):
        #Compute cost for given X,y, use weights already stored in class.
        self.yHat = self.forward(X)
        J = 0.5*sum((y-self.yHat)**2)
        return J
        
    def costFunctionPrime(self, X, y):
        #Compute derivative with respect to W and W2 for a given X and y:
        self.yHat = self.forward(X)
        
        delta3 = np.multiply(-(y-self.yHat), self.sigmoidPrime(self.z3))
        dJdW2 = np.dot(self.a2.T, delta3)
        
        delta2 = np.dot(delta3, self.W2.T)*self.sigmoidPrime(self.z2)
        dJdW1 = np.dot(X.T, delta2)  
        
        return dJdW1, dJdW2
    
    #Helper Functions for interacting with other classes:
    def getParams(self):
        #Get W1 and W2 unrolled into vector:
        params = np.concatenate((self.W1.ravel(), self.W2.ravel()))
        return params
    
    def setParams(self, params):
        #Set W1 and W2 using single paramater vector.
        W1_start = 0
        W1_end = self.hiddenLayerSize * self.inputLayerSize
        self.W1 = np.reshape(params[W1_start:W1_end], (self.inputLayerSize , self.hiddenLayerSize))
        W2_end = W1_end + self.hiddenLayerSize*self.outputLayerSize
        self.W2 = np.reshape(params[W1_end:W2_end], (self.hiddenLayerSize, self.outputLayerSize))
        
    def computeGradients(self, X, y):
        dJdW1, dJdW2 = self.costFunctionPrime(X, y)
        return np.concatenate((dJdW1.ravel(), dJdW2.ravel()))
